{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ZIKI\\\\Desktop\\\\ToDoReact\\\\todoappziki\\\\src\\\\components\\\\TodoList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport TodoItem from \"./TodoItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TodoList() {\n  _s();\n  function uniqueID() {\n    return Math.floor(Math.random() * Date.now());\n  }\n  tasks: [{\n    id: 1,\n    text: 'To make a todo list',\n    completed: false\n  }, {\n    id: 2,\n    text: 'To change logos and such...',\n    completed: false\n  }, {\n    id: 3,\n    text: 'This is a test',\n    completed: true\n  }];\n  const [tasks, setTasks] = useState([{\n    id: 1,\n    text: 'To make a todo list',\n    completed: false\n  }, {\n    id: 2,\n    text: 'To change logos and such...',\n    completed: false\n  }, {\n    id: 3,\n    text: 'This is a test',\n    completed: true\n  }]);\n  const [text, setText] = useState('');\n  // Add a task to the list\n  function addTask(text) {\n    const newTask = {\n      id: uniqueID(),\n      text,\n      completed: false\n    };\n    setTasks([tasks, newTask]);\n    setText('');\n  }\n\n  // Delete task from the list by filtering the list to exclude the id provided \n  function deleteTask(id) {\n    setTasks(tasks.filter(task => task.id !== id));\n  }\n\n  // Toggle Completed Task (true/false)\n  function toggleCompleted(id) {\n    setTasks(tasks.map(task => {\n      // finds the asked task to change completed bool value \n      if (task.id === id) {\n        // changes the value if the task id if found\n        return {\n          ...task,\n          completed: !task.completed\n        };\n      } else {\n        // doesn't change the value if the asked task is not found\n        return task;\n      }\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo-list\",\n    children: [tasks.map(task => /*#__PURE__*/_jsxDEV(TodoItem, {\n      task: task,\n      deleteTask: deleteTask,\n      toggleCompleted: toggleCompleted\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: text,\n      onChange: e => setText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addTask(text),\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n_s(TodoList, \"VW4KCVc1Akprj0SSGO8UOE48I24=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useState","TodoItem","jsxDEV","_jsxDEV","TodoList","_s","uniqueID","Math","floor","random","Date","now","tasks","id","text","completed","setTasks","setText","addTask","newTask","deleteTask","filter","task","toggleCompleted","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ZIKI/Desktop/ToDoReact/todoappziki/src/components/TodoList.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport TodoItem from \"./TodoItem\";\r\n\r\n\r\nfunction TodoList(){\r\n    \r\n    function uniqueID() {\r\n        return Math.floor(Math.random() * Date.now())\r\n        }\r\n        tasks: [\r\n            {\r\n            id:1,\r\n            text:'To make a todo list',\r\n            completed:false\r\n        },\r\n        {\r\n            id:2,\r\n            text:'To change logos and such...',\r\n            completed:false\r\n        },\r\n        {\r\n            id:3,\r\n            text:'This is a test',\r\n            completed: true\r\n        }\r\n    ]\r\n    const [tasks, setTasks] = useState([\r\n        {\r\n            id:1,\r\n            text:'To make a todo list',\r\n            completed:false\r\n        },\r\n        {\r\n            id:2,\r\n            text:'To change logos and such...',\r\n            completed:false\r\n        },\r\n        {\r\n            id:3,\r\n            text:'This is a test',\r\n            completed: true\r\n        }\r\n    ]);\r\n    const [text, setText] = useState('');\r\n    // Add a task to the list\r\n    function addTask(text){\r\n        const newTask = {\r\n            id:uniqueID(),\r\n            text,\r\n            completed:false\r\n        }\r\n        setTasks([tasks, newTask]);\r\n        setText('');\r\n    }\r\n\r\n    // Delete task from the list by filtering the list to exclude the id provided \r\n    function deleteTask(id){\r\n        setTasks(tasks.filter(task => task.id !== id))\r\n    }\r\n\r\n    // Toggle Completed Task (true/false)\r\n    function toggleCompleted(id){\r\n        setTasks(tasks.map(task => {\r\n            // finds the asked task to change completed bool value \r\n            if(task.id === id) {\r\n                // changes the value if the task id if found\r\n                return {...task, completed: !task.completed};\r\n            }\r\n            else {\r\n                // doesn't change the value if the asked task is not found\r\n                return task;\r\n            }\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo-list\">\r\n            {tasks.map(task => (\r\n                <TodoItem \r\n                key={task.id}\r\n                task={task}\r\n                deleteTask={deleteTask}\r\n                toggleCompleted={toggleCompleted}\r\n                />\r\n            ))}\r\n            <input\r\n            value={text}\r\n            onChange={e => setText(e.target.value)}/>\r\n            <button onClick={() => addTask(text)}>Add</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}